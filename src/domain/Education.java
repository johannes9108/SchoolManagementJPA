/**
 * This file was generated by the Jeddict
 */
package domain;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.PreRemove;

/**
 * @author rober
 */
@Entity
public class Education {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Basic
    private String name;

    @Basic
    private String faculty;

    @Basic
    private LocalDate startDate;

    @Basic
    private LocalDate finalDate;

    @OneToMany(mappedBy = "education",cascade = {CascadeType.MERGE,CascadeType.PERSIST,CascadeType.REFRESH})
    private List<Student> students;

    @ManyToMany(mappedBy = "educations", cascade = {CascadeType.MERGE,CascadeType.PERSIST,CascadeType.REFRESH})
    private List<Course> courses;

    public Education(String name, String faculty, LocalDate startDate, LocalDate finalDate) {
        this.name = name;
        this.faculty = faculty;
        this.startDate = startDate;
        this.finalDate = finalDate;
        students = new ArrayList<>();
        courses = new ArrayList<>();
        
    }

    public Education() {
        
    }

    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getFaculty() {
        return this.faculty;
    }

    public void setFaculty(String faculty) {
        this.faculty = faculty;
    }

    public LocalDate getStartDate() {
        return this.startDate;
    }

    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    public LocalDate getFinalDate() {
        return this.finalDate;
    }

    public void setFinalDate(LocalDate finalDate) {
        this.finalDate = finalDate;
    }

    public List<Student> getStudents() {
        if (students == null) {
            students = new ArrayList<>();
        }
        return this.students;
    }

    public void setStudents(List<Student> students) {
        this.students = students;
    }

    public void addStudent(Student student) {
        students.add(student);
        student.setEducation(this);
    }

    @PreRemove
    public void clearBindingsFromEducation() {
    	System.out.println("S size: " + students.size());
    	System.out.println("C size: " + courses.size());
    	clearStudentBindingsFromEducation();
    	clearCourseBindingsFromEducation();
    }

	public List<Course> clearCourseBindingsFromEducation() {
		System.out.println("clearCourseBindingsFromEducation()");
		for(Course course: courses) {
    		course.getEducations().remove(this);
    	}
		return courses;
	}

	public List<Student> clearStudentBindingsFromEducation() {
		System.out.println("clearStudentBindingsFromEducation()");
		for (Student student : students) {
			student.setEducation(null);
		}
		return students;
	}
    public void removeStudent(Student student) {
        students.remove(student);
        student.setEducation(null);
    }

    public List<Course> getCourses() {
        if (courses == null) {
            courses = new ArrayList<>();
        }
        return this.courses;
    }

    public void setCourses(List<Course> courses) {
        this.courses = courses;
    }

    public void addCourse(Course course) {
        courses.add(course);
        course.getEducations().add(this);
    }

    public void removeCourse(Course course) {
        courses.remove(course);
        course.getEducations().remove(this);
    }

    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Education{" + "id=" + id + ", name=" + name + ", faculty=" + faculty + ", startDate=" + startDate + ", finalDate=" + finalDate + ", Courses=");
        courses.forEach(t->sb.append(t.getName()+ ", "));
        sb.append("\nStudents=");
        students.forEach(t->sb.append(t.getFirstName()+" " + t.getLastName() + ", "));
        sb.delete(sb.length()-2, sb.length());
        sb.append('}');
        return sb.toString();
    }
}