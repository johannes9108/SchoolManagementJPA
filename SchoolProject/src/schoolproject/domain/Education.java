/**
 * This file was generated by the Jeddict
 */
package schoolproject.domain;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;

/**
 * @author Patrik
 */
@Entity
public class Education {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int id;

    @Basic
    private String name;

    @ManyToMany(cascade = CascadeType.PERSIST)
    private List<Course> courseses;

    @ManyToMany(cascade = CascadeType.PERSIST)
    private List<Student> students;

    public Education() {
    }

    public Education(String name) {
        this.name = name;
    }
    
    

    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Course> getCourseses() {
        if (courseses == null) {
            courseses = new ArrayList<>();
        }
        return this.courseses;
    }

    public void setCourseses(List<Course> courseses) {
        this.courseses = courseses;
    }

    public void addCoursese(Course coursese) {
        getCourseses().add(coursese);
        coursese.getEducations().add(this);
    }

    public void removeCoursese(Course coursese) {
        getCourseses().remove(coursese);
        coursese.getEducations().remove(this);
    }

    public List<Student> getStudents() {
        if (students == null) {
            students = new ArrayList<>();
        }
        return this.students;
    }

    public void setStudents(List<Student> students) {
        this.students = students;
    }

    public void addStudent(Student student) {
        getStudents().add(student);
        student.getEducations().add(this);
    }

    public void removeStudent(Student student) {
        getStudents().remove(student);
    }

}